// Simple SendGrid email test
require('dotenv').config({ path: '.env.local' });

async function testSendGridEmail() {
  console.log('📧 Testing SendGrid Email Functionality');
  console.log('='.repeat(50));
  
  try {
    // Check if SendGrid API key is available
    const apiKey = process.env.SENDGRID_API_KEY;
    
    if (!apiKey) {
      console.log('❌ SENDGRID_API_KEY not found');
      console.log('💡 Make sure it\'s set in .env.local');
      return false;
    }
    
    console.log('✅ SendGrid API key found');
    console.log(`📝 Key starts with: ${apiKey.substring(0, 10)}...`);
    
    // Test SendGrid library import
    console.log('\n🔍 Testing SendGrid library...');
    
    try {
      // Import SendGrid
      const sgMail = require('@sendgrid/mail');
      sgMail.setApiKey(apiKey);
      
      console.log('✅ SendGrid library imported successfully');
      
      // Test a simple email send
      console.log('\n📤 Testing email send...');
      
      const testEmail = {
        to: 'test@example.com', // Change this to your test email
        from: {
          email: 'contact@leadsup.io',
          name: 'LeadsUp Test'
        },
        subject: 'SendGrid Domain Test - ' + new Date().toISOString(),
        html: `
          <h2>SendGrid Integration Test</h2>
          <p>This email confirms that SendGrid is working with your domain-based sender system.</p>
          <p><strong>Test Details:</strong></p>
          <ul>
            <li>Sent from: contact@leadsup.io</li>
            <li>Provider: SendGrid API</li>
            <li>Integration: Domain-based senders</li>
            <li>Timestamp: ${new Date().toISOString()}</li>
          </ul>
          <p>If you receive this email, the outbound system is working!</p>
          <hr>
          <p><small>Generated by LeadsUp email integration test</small></p>
        `,
        text: `SendGrid Integration Test

This email confirms that SendGrid is working with your domain-based sender system.

Test Details:
- Sent from: contact@leadsup.io
- Provider: SendGrid API
- Integration: Domain-based senders
- Timestamp: ${new Date().toISOString()}

If you receive this email, the outbound system is working!

Generated by LeadsUp email integration test`,
        replyTo: 'contact@leadsup.io'
      };
      
      console.log('📋 Email Configuration:');
      console.log(`   To: ${testEmail.to}`);
      console.log(`   From: ${testEmail.from.email} (${testEmail.from.name})`);
      console.log(`   Subject: ${testEmail.subject}`);
      
      // Send the email
      const result = await sgMail.send(testEmail);
      
      console.log('\n✅ Email sent successfully!');
      console.log('📊 SendGrid Response:');
      console.log(`   Status Code: ${result[0].statusCode}`);
      console.log(`   Message ID: ${result[0].headers['x-message-id']}`);
      
      console.log('\n🎉 SendGrid integration is working correctly!');
      console.log('\n📧 What to do next:');
      console.log('1. Check the recipient email for delivery');
      console.log('2. Reply to the email to test inbound functionality');
      console.log('3. Check SendGrid dashboard for delivery stats');
      
      return true;
      
    } catch (sendError) {
      console.log('❌ Email send failed:', sendError.message);
      
      if (sendError.response && sendError.response.body) {
        console.log('📋 SendGrid Error Details:', sendError.response.body);
      }
      
      console.log('\n🔧 Common issues:');
      console.log('- Sender email not verified in SendGrid');
      console.log('- API key doesn\'t have send permissions');
      console.log('- Domain not authenticated in SendGrid');
      
      return false;
    }
    
  } catch (error) {
    console.log('❌ Test failed:', error.message);
    return false;
  }
}

async function testWebhookURL() {
  console.log('\n🕸️ Testing Webhook Configuration');
  console.log('-'.repeat(30));
  
  try {
    const fs = require('fs');
    
    // Check if webhook exists
    const webhookPath = './app/api/webhooks/sendgrid/route.ts';
    
    if (!fs.existsSync(webhookPath)) {
      console.log('❌ Webhook file not found');
      return false;
    }
    
    console.log('✅ Webhook file exists');
    
    // Check webhook content
    const webhookContent = fs.readFileSync(webhookPath, 'utf8');
    
    const checks = [
      { name: 'SendGrid Inbound Parse handler', check: webhookContent.includes('SendGrid Inbound Parse') },
      { name: 'Form data parsing', check: webhookContent.includes('parseFormData') },
      { name: 'Campaign sender lookup', check: webhookContent.includes('campaign_senders') },
      { name: 'Inbox message storage', check: webhookContent.includes('inbox_messages') },
      { name: 'Conversation threading', check: webhookContent.includes('conversation_id') }
    ];
    
    checks.forEach(check => {
      const status = check.check ? '✅' : '❌';
      console.log(`${status} ${check.name}`);
    });
    
    const passedChecks = checks.filter(c => c.check).length;
    console.log(`\n📊 Webhook features: ${passedChecks}/${checks.length} implemented`);
    
    if (passedChecks === checks.length) {
      console.log('✅ Webhook is fully configured for inbound email handling');
    }
    
    console.log('\n💡 Webhook URL for SendGrid:');
    console.log('https://your-domain.com/api/webhooks/sendgrid');
    console.log('\n📚 To configure in SendGrid:');
    console.log('1. Go to Settings > Inbound Parse');
    console.log('2. Add the webhook URL above');
    console.log('3. Set up subdomain: reply.leadsup.io');
    
    return passedChecks === checks.length;
    
  } catch (error) {
    console.log('❌ Webhook test error:', error.message);
    return false;
  }
}

async function checkEmailAutomation() {
  console.log('\n🤖 Testing Email Automation System');
  console.log('-'.repeat(30));
  
  try {
    const fs = require('fs');
    
    // Check automation API
    const automationPath = './app/api/campaigns/automation/send-emails/route.ts';
    
    if (!fs.existsSync(automationPath)) {
      console.log('❌ Email automation API not found');
      return false;
    }
    
    console.log('✅ Email automation API exists');
    
    const automationContent = fs.readFileSync(automationPath, 'utf8');
    
    const features = [
      { name: 'SendGrid integration', check: automationContent.includes('sendEmailWithSendGrid') },
      { name: 'Domain-based senders', check: automationContent.includes('campaign_senders') },
      { name: 'Sender rotation', check: automationContent.includes('getNextAvailableSender') },
      { name: 'Timezone awareness', check: automationContent.includes('timezone') },
      { name: 'Inbox logging', check: automationContent.includes('inbox_messages') },
      { name: 'Template processing', check: automationContent.includes('{{firstName}}') },
      { name: 'Rate limiting', check: automationContent.includes('setTimeout') },
      { name: 'Error handling', check: automationContent.includes('try.*catch') }
    ];
    
    features.forEach(feature => {
      const status = feature.check ? '✅' : '❌';
      console.log(`${status} ${feature.name}`);
    });
    
    const implementedFeatures = features.filter(f => f.check).length;
    console.log(`\n📊 Automation features: ${implementedFeatures}/${features.length} implemented`);
    
    if (implementedFeatures >= 6) {
      console.log('✅ Email automation system is well-configured');
    }
    
    return implementedFeatures >= 6;
    
  } catch (error) {
    console.log('❌ Automation test error:', error.message);
    return false;
  }
}

async function runComprehensiveTest() {
  console.log('🧪 Comprehensive Email Integration Test');
  console.log('='.repeat(60));
  
  const results = {
    sendgrid: false,
    webhook: false,
    automation: false
  };
  
  // Test SendGrid email sending
  results.sendgrid = await testSendGridEmail();
  
  // Test webhook configuration
  results.webhook = await testWebhookURL();
  
  // Test automation system
  results.automation = await checkEmailAutomation();
  
  // Summary
  console.log('\n' + '='.repeat(60));
  console.log('📊 COMPREHENSIVE TEST RESULTS');
  console.log('='.repeat(60));
  
  const tests = [
    { name: 'SendGrid Email Sending', result: results.sendgrid },
    { name: 'Inbound Webhook Setup', result: results.webhook },
    { name: 'Email Automation System', result: results.automation }
  ];
  
  tests.forEach(test => {
    const status = test.result ? '✅ PASS' : '❌ FAIL';
    console.log(`${status} ${test.name}`);
  });
  
  const passedTests = tests.filter(t => t.result).length;
  console.log(`\n📈 Overall Score: ${passedTests}/${tests.length} systems working`);
  
  if (passedTests === tests.length) {
    console.log('\n🎉 All email systems are operational!');
    console.log('✅ Your domain-based email integration is ready for production');
    
    console.log('\n🚀 Next Steps:');
    console.log('1. ✅ Outbound emails via SendGrid - Working');
    console.log('2. ✅ Inbound email webhook - Configured');
    console.log('3. ✅ Email automation - Implemented');
    console.log('4. 📋 Test with real campaign data');
    console.log('5. 📋 Configure SendGrid Inbound Parse in dashboard');
    
  } else {
    console.log('\n⚠️ Some systems need attention:');
    
    if (!results.sendgrid) {
      console.log('🔧 Fix SendGrid configuration and domain verification');
    }
    if (!results.webhook) {
      console.log('🔧 Complete webhook implementation');
    }
    if (!results.automation) {
      console.log('🔧 Review email automation features');
    }
  }
  
  console.log('\n📚 Documentation:');
  console.log('- SendGrid Setup: https://docs.sendgrid.com/');
  console.log('- Inbound Parse: https://docs.sendgrid.com/for-developers/parsing-email/inbound-email');
  console.log('- Domain Authentication: https://docs.sendgrid.com/ui/account-and-settings/how-to-set-up-domain-authentication');
}

// Run the comprehensive test
runComprehensiveTest().catch(error => {
  console.error('💥 Test failed:', error);
});