name: Email Automation Processor

on:
  schedule:
    # Run every hour - automation will handle filtering based on analytics status
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  process-scheduled-emails:
    runs-on: ubuntu-latest
    
    environment:
      name: production
    
    steps:
      - name: Process Scheduled Campaign Emails
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          EMAIL_SIMULATION_MODE: false
        run: |
          echo "üïê Processing scheduled emails at $(date)"
          
          # Call the automation endpoint that extracts real email content from campaign_sequences
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-SendGrid-Key: ${{ secrets.SENDGRID_API_KEY }}" \
            -d '{"testMode": false}' \
            "${{ secrets.APP_URL }}/api/automation/run")
          
          # Extract HTTP status and body
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          # Log response
          echo "üìä HTTP Status: $http_code"
          echo "üìß Response: $body"
          
          # Check if successful
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Email processing completed successfully"
            
            # Parse and log key metrics (if jq is available)
            if command -v jq &> /dev/null; then
              sent=$(echo "$body" | jq -r '.stats.sent // 0')
              processed=$(echo "$body" | jq -r '.stats.processed // 0')
              errors=$(echo "$body" | jq -r '.stats.errors // 0')
              skipped=$(echo "$body" | jq -r '.stats.skipped // 0')
              
              echo "üìà Summary: $sent sent, $skipped skipped, $errors errors (total: $processed)"
              
              # Set job outputs for monitoring
              echo "sent=$sent" >> $GITHUB_OUTPUT
              echo "processed=$processed" >> $GITHUB_OUTPUT
              echo "errors=$errors" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Email processing failed with status $http_code"
            echo "Response: $body"
            exit 1
          fi

  process-warmup-scheduler:
    runs-on: ubuntu-latest
    # Run warming scheduler once per day at 9 AM UTC
    if: github.event.schedule == '0 9 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Process Warmup Scheduler
        run: |
          echo "üå°Ô∏è  Processing warmup scheduler at $(date)"
          
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X GET \
            -H "Content-Type: application/json" \
            "${{ secrets.APP_URL }}/api/warming/scheduler")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä HTTP Status: $http_code"
          echo "üå°Ô∏è  Response: $body"
          
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Warmup scheduling completed successfully"
          else
            echo "‚ùå Warmup scheduling failed with status $http_code"
            exit 1
          fi

  process-warmup-execution:
    runs-on: ubuntu-latest
    # Run auto warmup execution once per day at 10 AM UTC (after scheduler)
    if: github.event.schedule == '0 10 * * *' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: production
    
    steps:
      - name: Process Auto Warmup Execution
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          EMAIL_SIMULATION_MODE: false
        run: |
          echo "üî• Processing auto warmup execution at $(date)"
          
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X GET \
            -H "Content-Type: application/json" \
            "${{ secrets.APP_URL }}/api/automation/process-warmup?autoMode=true")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä HTTP Status: $http_code"
          echo "üî• Response: $body"
          
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Auto warmup execution completed successfully"
            
            # Parse and log key metrics (if jq is available)
            if command -v jq &> /dev/null; then
              sent=$(echo "$body" | jq -r '.sent // 0')
              processed=$(echo "$body" | jq -r '.processed // 0')
              
              echo "üî• Warmup Summary: $sent warm-up emails sent for $processed senders"
              
              # Set job outputs for monitoring
              echo "warmup_sent=$sent" >> $GITHUB_OUTPUT
              echo "warmup_processed=$processed" >> $GITHUB_OUTPUT
            fi
            
            # Verify SendGrid events were created (wait 30 seconds for webhook processing)
            echo "‚è±Ô∏è Waiting 30 seconds for SendGrid webhook events to process..."
            sleep 30
            
            echo "üîç Verifying SendGrid events and health score updates..."
            verify_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X GET \
              -H "Content-Type: application/json" \
              "${{ secrets.APP_URL }}/api/webhooks/sendgrid/events")
            
            verify_http_code=$(echo $verify_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            verify_body=$(echo $verify_response | sed -e 's/HTTPSTATUS:.*//g')
            
            if [ $verify_http_code -eq 200 ]; then
              echo "‚úÖ SendGrid webhook endpoint is healthy"
              echo "üìä Webhook status: $verify_body"
            else
              echo "‚ö†Ô∏è SendGrid webhook verification failed: $verify_http_code"
            fi
            
          else
            echo "‚ùå Auto warmup execution failed with status $http_code"
            echo "Response: $body"
            exit 1
          fi

  verify-warmup-tracking:
    runs-on: ubuntu-latest
    needs: process-warmup-execution
    # Only run after warmup execution and if it was successful
    if: needs.process-warmup-execution.result == 'success'
    
    steps:
      - name: Verify SendGrid Events and Health Score Updates
        run: |
          echo "üîç Verifying SendGrid event tracking after warmup..."
          
          # Wait for webhook events to be processed
          sleep 60
          
          # Create verification API endpoint call
          verify_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"action": "verify_warmup_tracking"}' \
            "${{ secrets.APP_URL }}/api/debug/verify-warmup-events")
          
          verify_http_code=$(echo $verify_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          verify_body=$(echo $verify_response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä HTTP Status: $verify_http_code"
          echo "üìà Verification Result: $verify_body"
          
          if [ $verify_http_code -eq 200 ]; then
            echo "‚úÖ SendGrid tracking verification completed"
            
            # Parse verification results
            if command -v jq &> /dev/null; then
              events_count=$(echo "$verify_body" | jq -r '.eventsCount // 0')
              health_updates=$(echo "$verify_body" | jq -r '.healthUpdates // 0')
              
              echo "üìß Events tracked: $events_count"
              echo "‚ù§Ô∏è Health scores updated: $health_updates"
              
              # Set outputs for monitoring
              echo "events_tracked=$events_count" >> $GITHUB_OUTPUT
              echo "health_updated=$health_updates" >> $GITHUB_OUTPUT
              
              # Alert if no events were tracked
              if [ "$events_count" -eq "0" ]; then
                echo "‚ö†Ô∏è Warning: No SendGrid events were tracked - check webhook configuration"
              fi
            fi
          else
            echo "‚ö†Ô∏è Verification endpoint failed with status $verify_http_code"
            echo "This may indicate webhook or tracking issues"
            # Don't fail the job for verification issues
          fi
