// Test script to send a real email using domain-based sender accounts
const { sendEmailWithSendGrid } = require('./lib/sendgrid');

async function testRealDomainEmail() {
  console.log('📧 Testing Real Domain-Based Email Sending');
  console.log('='.repeat(50));
  
  try {
    // Configuration for test email
    const testConfig = {
      to: 'test@example.com', // Change this to your test email
      from: 'contact@leadsup.io', // This should be your verified domain
      fromName: 'LeadsUp Test',
      subject: 'Test Email from Domain-Based Sender',
      html: `
        <h2>Domain-Based Email Test</h2>
        <p>Hello!</p>
        <p>This is a test email sent using the domain-based sender system.</p>
        <p><strong>Details:</strong></p>
        <ul>
          <li>Sent from: contact@leadsup.io</li>
          <li>Integration: SendGrid API</li>
          <li>System: Domain-based sender accounts</li>
          <li>Timestamp: ${new Date().toISOString()}</li>
        </ul>
        <p>If you receive this email, the outbound email system is working correctly!</p>
        <p>Reply to this email to test the inbound webhook functionality.</p>
        <hr>
        <p><small>Generated by LeadsUp Email Integration Test</small></p>
      `,
      replyTo: 'test@reply.leadsup.io' // This will capture replies
    };
    
    console.log('📋 Test Configuration:');
    console.log(`   To: ${testConfig.to}`);
    console.log(`   From: ${testConfig.from} (${testConfig.fromName})`);
    console.log(`   Subject: ${testConfig.subject}`);
    console.log(`   Reply-To: ${testConfig.replyTo}`);
    
    console.log('\n🚀 Sending test email...');
    
    // Send the email
    const result = await sendEmailWithSendGrid(testConfig);
    
    console.log('\n✅ Email sent successfully!');
    console.log('📊 Send Result:', {
      success: result.success,
      messageId: result.messageId,
      provider: result.provider,
      method: result.method
    });
    
    console.log('\n📧 What to check:');
    console.log('1. Check the recipient email inbox for delivery');
    console.log('2. Reply to the email to test inbound functionality');
    console.log('3. Check SendGrid dashboard for delivery status');
    console.log('4. Monitor application logs for webhook activity');
    
    console.log('\n🔗 Useful Links:');
    console.log('- SendGrid Activity Feed: https://app.sendgrid.com/email_activity');
    console.log('- Webhook logs: Check your application console');
    
    return result;
    
  } catch (error) {
    console.error('\n❌ Email sending failed:', error.message);
    
    // Provide troubleshooting guidance
    console.log('\n🔧 Troubleshooting:');
    
    if (error.message.includes('Forbidden')) {
      console.log('- Check that your SendGrid API key has send permissions');
      console.log('- Verify the from email is authenticated in SendGrid');
    }
    
    if (error.message.includes('not verified')) {
      console.log('- Add and verify your sender domain in SendGrid');
      console.log('- Use Single Sender Verification for testing');
    }
    
    if (error.message.includes('SENDGRID_API_KEY')) {
      console.log('- Set the SENDGRID_API_KEY environment variable');
      console.log('- Get your API key from: https://app.sendgrid.com/settings/api_keys');
    }
    
    console.log('\n📚 SendGrid Setup Guide:');
    console.log('1. Create SendGrid account: https://signup.sendgrid.com/');
    console.log('2. Generate API key with send permissions');
    console.log('3. Verify your sender domain or email');
    console.log('4. Set SENDGRID_API_KEY environment variable');
    
    throw error;
  }
}

// Test different sender domains
async function testMultipleDomains() {
  console.log('\n📧 Testing Multiple Domain Senders');
  console.log('='.repeat(50));
  
  const testDomains = [
    'contact@leadsup.io',
    'hello@leadsup.io', 
    'support@leadsup.io'
  ];
  
  for (const fromEmail of testDomains) {
    try {
      console.log(`\n🔍 Testing sender: ${fromEmail}`);
      
      const result = await sendEmailWithSendGrid({
        to: 'test@example.com',
        from: fromEmail,
        fromName: `LeadsUp Test (${fromEmail})`,
        subject: `Test from ${fromEmail}`,
        html: `<p>Test email from ${fromEmail} - ${new Date().toISOString()}</p>`,
        replyTo: 'test@reply.leadsup.io'
      });
      
      console.log(`✅ ${fromEmail} - Success: ${result.messageId}`);
      
    } catch (error) {
      console.log(`❌ ${fromEmail} - Failed: ${error.message}`);
    }
    
    // Rate limiting between sends
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// Test email with reply tracking
async function testWithReplyTracking() {
  console.log('\n📧 Testing Email with Reply Tracking');
  console.log('='.repeat(50));
  
  try {
    const testEmail = {
      to: 'test@example.com',
      from: 'contact@leadsup.io',
      fromName: 'LeadsUp Campaign Test',
      subject: 'Campaign Test - Reply Expected',
      html: `
        <h2>Campaign Email Test</h2>
        <p>Hi there!</p>
        <p>This is a test email from our campaign system.</p>
        <p><strong>Please reply to this email</strong> to test our inbound handling.</p>
        <p>Your reply will be captured by our SendGrid Inbound Parse webhook.</p>
        <p>Tracking ID: TEST-${Date.now()}</p>
        <hr>
        <p><small>This email was sent via LeadsUp campaign system</small></p>
      `,
      replyTo: 'contact@leadsup.io' // Replies go to the same domain for webhook capture
    };
    
    console.log('📋 Sending trackable campaign email...');
    const result = await sendEmailWithSendGrid(testEmail);
    
    console.log('✅ Campaign email sent!');
    console.log(`📨 Message ID: ${result.messageId}`);
    console.log('\n📧 Next steps:');
    console.log('1. Check your email and reply to the test email');
    console.log('2. Monitor webhook logs at /api/webhooks/sendgrid');
    console.log('3. Check inbox_messages table for captured replies');
    
    return result;
    
  } catch (error) {
    console.error('❌ Campaign email test failed:', error.message);
    throw error;
  }
}

// Main function
async function runEmailTests() {
  console.log('🧪 Domain-Based Email Functionality Tests');
  console.log('='.repeat(60));
  
  try {
    // Test 1: Basic domain email sending
    await testRealDomainEmail();
    
    console.log('\n' + '⏸️'.repeat(20));
    console.log('⏸️  Waiting 3 seconds between tests...');
    console.log('⏸️'.repeat(20));
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Test 2: Multiple domain senders
    await testMultipleDomains();
    
    console.log('\n' + '⏸️'.repeat(20));
    console.log('⏸️  Waiting 3 seconds between tests...');
    console.log('⏸️'.repeat(20));
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Test 3: Campaign email with reply tracking
    await testWithReplyTracking();
    
    console.log('\n🎉 All email tests completed!');
    console.log('\n📊 Summary:');
    console.log('✅ Domain-based email sending tested');
    console.log('✅ Multiple sender domains tested');
    console.log('✅ Reply tracking configuration tested');
    console.log('\n📧 Check your email inbox and reply to test inbound functionality!');
    
  } catch (error) {
    console.error('\n💥 Email tests failed:', error);
    console.log('\n🔧 Make sure to:');
    console.log('1. Set SENDGRID_API_KEY environment variable');
    console.log('2. Verify sender domains in SendGrid');
    console.log('3. Update test email addresses in the script');
  }
}

// Run the tests if this script is executed directly
if (require.main === module) {
  runEmailTests();
}

module.exports = {
  testRealDomainEmail,
  testMultipleDomains,
  testWithReplyTracking
};